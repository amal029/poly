zeros out int32s T[M] {int32s X = 0 case (X==1) X=X+1 otherwise {X=X-1} par i in 0:M-1 T[i] = T[i]+X}
var_index out T[M] par i in 0:M-2 T[i+1] = 0
zeros2 out T[M][M] par i in 0:M-1 par j in 0:M-1 T[i][j] = 0

ones out int32s T[M] par i in 0:M-1 T[i] = T[0]+1

cast_test out O[H] par i in 0:H-1 O[i] = (int8)0

gray in yin out yout, uout, vout
{
  yout = (int8)yin
  uout = 128
  vout = 128
}

read_set in R[M] out O[M] par i in 0:M-1:2 O[i] = R[i] + (i*i)
read_set2 in R[M][N] out O[M][N] for i in 0:M-1 par j in 0:N-1 {O[i][j] = R[i][j] O[i][j] = R[i][j]}
non1stride in R[M][N] out O[M][N] par i in 0:M-1 par j in 0:N-1:2 O[i][j] = R[i][j]+R[i][j]

/* The below one will not vectorize */
for_par out R[M][N] for i in 0:M-1 par j in 0:N-1 R[j][i] = 1
for_par2 in T[M][N] out R[M][N] for i in 0:M-1 par j in 0:N-1 R[i][j] = T[i][j]

heroes out T[M][N] par i in 0:M-1 par j in 0:N-1 T[i][j] = (i*j)
heroes2 out T[M][N] par i in 0:M-1 par j in 0:N-1 T[i][j] = 4

rso in I out O O = I
rso2 in I[M] out O[M] par i in 0:M-1 O[i] = I[i]

main
{
  var size = 4
  /* var s2 = (size+1) */
  var Array[size];
  int8 t1 var t2 var t3
  var array[size][size];
  array = heroes2()
  par i in 0:size-1 par j in 0:size-1 (t1,t2,t3) = gray(array[i][j])
  /* for i in 0:size-1 (test,t2) = call_primitive_type_test () */
  /* array = ones () */
  Array = zeros ()
  Array = var_index ()
  var s2 = size/2
  var trray[s2] = cast_test()
  /* print the array */
  /* print the ret value */
  /* ret = extern p1 (ret) */
  /* int ret = extern print_array (s2,trray) */
  int ret = extern print_array (size,Array)
  ret = extern print_array2 (size,size,array)
  /* Array = read_set(array) */
  /* /\* print the array *\/ */
  /* ret = extern print_array (size,Array) */
  /* print the ret value */
  /* ret = extern p1 (ret) */

  var Varray[size][size] = heroes2()

  /* /\* print a 2D array *\/ */
  /* /\* print the ret value *\/ */
  /* /\* ret = extern p1 (ret) *\/ */

  var Vrray2[size][size] = heroes()
  Varray = read_set2(Vrray2)
  ret = extern print_array2 (size,size,Varray)
  /* Vrray2 = non1stride(Varray) */

  /* /\* print a 2D array *\/ */
  /* ret = extern print_array2 (size,s2,Vrray2) */
  /* Vrray2 = for_par () */
  /* Varray = for_par2 (Vrray2) */
  /* int ret = extern print_array2 (size,size,Vrray2) */
  /* ret = extern print_array2 (size,size,Varray) */
  /* /\* int ret = extern print_array2 (size,Varray) *\/ */
  /* /\* print the ret value *\/ */
  /* /\* ret = extern p1 (ret) *\/ */
  
  /* var NA[size] = ones() */
  /* var NAA[size] = zeros() */
  /* ret = extern print_array (size,NAA) */
  /* for i in 0:size-1 NAA[i] = rso (NA[i]) */
  /* ret = extern print_array (size,NAA) */
  
  /* var NA2[size][size] = heroes2() */
  /* var NAA2[size][size] = heroes2() */
  /* ret = extern print_array2 (size,NAA2) */
  /* for i in 0:size-1 NAA2[i] = rso2(NA2[i]) */
  /* ret = extern print_array2(size,size,NAA2) */
}
