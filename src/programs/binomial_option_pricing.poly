compute_value_at_excercise_date in T[optN], S[optN], X[optN], M, Volatility, RiskFree
  out steps[N][optN], prices[N][optN]
{
  for u in 0:optN-1
  {
    var dT = T[u]/M 
    var VsdT = Volatility * (dT^(1.0/2.0))
    var RdT = RiskFree * dT
    var EXP = 2.71828128
    var R = EXP ^ RdT 
    var Rinv = 1.0/R
    var u1 = EXP ^ VsdT 
    var d = 1.0/u1
    var Pu = (R-d)/(u1-d) 
    var Pd = 1.0-Pu
    var PuByR = Pu * Rinv
    var PdByR = Pd * Rinv
    var inter[optN]
    var value = 0.0
    var Xu = X[u]
    par i in 0:N-1 {
      par j in 0:optN-1 prices[i][j] = S[u]*(2.718281828^(VsdT*(2.0*(float)j) - M))
      par j in 0:optN-1 inter[j] = prices[i][j] - Xu
      for j in 0:optN-1 value = value + inter[j]
      case
      (value >= 0.0) par j in 0:optN-1 steps[i][j] = inter[j]
      otherwise par j in 0:optN-1 steps[i][j] = 0.0
    }
    for i in N-1:0:(-1) par j in 0:optN-2 { steps[i][j] = (steps[i][j]*PuByR) + (steps[i][j+1]*PdByR)}
  }
}

main
{
  var NM = 3
  var optNM = 3
  var TM[optNM]
  par i in 0:optNM-1 TM[i] = 0.0
  var SM[optNM]
  par i in 0:optNM-1 SM[i] = 0.0
  var XM[optNM]
  par i in 0:optNM-1 XM[i] = 0.0
  var MM = 100.0
  var VolatilityM = 100.0
  var RiskFreeM = 100.0
  var stepsM[NM][optNM]
  var pricesM[NM][optNM]
  (stepsM, pricesM) = compute_value_at_excercise_date (TM,SM,XM,MM,VolatilityM,RiskFreeM)
}
