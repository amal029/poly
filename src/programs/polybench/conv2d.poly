/* Simplest and the most inefficient conv2d example*/
conv2d 
in I[dataSizeX][dataSizeY], K[kernelSizeX][kernelSizeY] 
out float O[dataSizeX][dataSizeY]
{
  var kCenterX = kernelSizeX/2
  var kCenterY = kernelSizeY/2
  var mm var nn
  var rowIndex var colIndex
  for i in 0:dataSizeY-1{
   for j in 0:dataSizeX-1{
    var sum = 0.0
    for m in 0:kernelSizeY-1{
     mm = kernelSizeY - 1 - m
     for n in 0:kernelSizeX-1{
      nn = kernelSizeX - 1 - n
      rowIndex = i + m - kCenterY
      colIndex = j+n-kCenterX
      case (rowIndex >= 0 && rowIndex < dataSizeY && colIndex >= 0 && colIndex < dataSizeX) 
      {sum = sum + (I[rowIndex][colIndex] *K[mm][nn])
       /* assign to output array */
       O[rowIndex][colIndex] = extern fabs_add_point_5(sum)}
      otherwise {}
     }
    }
   }
  }
} where (dataSizeX >= 0 && dataSizeY >= 0)

/* read image from a file */
init_IN in int32s M out float OR[M][N]{
  int ret = extern read_image(M,OR)
  /* print the kernel size read in*/
  ret = extern p1(ret)
}where (M==N) 

/* 5x5 gaussian kernel */
init_K out O[M][N] {
  O[0][0] = (1.0/256.0)
  O[0][1] = (4.0/256.0)
  O[0][2] = (6.0/256.0)
  O[0][3] = (4.0/256.0)
  O[0][4] = (1.0/256.0)
  O[1][0] = (4.0/256.0)
  O[1][1] = (16.0/256.0)
  O[1][2] = (24.0/256.0)
  O[1][3] = (16.0/256.0)
  O[1][4] = (4.0/256.0)
  O[2][0] = (6.0/256.0)
  O[2][1] = (24.0/256.0)
  O[2][2] = (36.0/256.0)
  O[2][3] = (24.0/256.0)
  O[2][4] = (6.0/256.0)
  O[3][0] = (4.0/256.0)
  O[3][1] = (16.0/256.0)
  O[3][2] = (24.0/256.0)
  O[3][3] = (16.0/256.0)
  O[3][4] = (4.0/256.0)
  O[4][0] = (1.0/256.0)
  O[4][1] = (4.0/256.0)
  O[4][2] = (6.0/256.0)
  O[4][3] = (4.0/256.0)
  O[4][4] = (1.0/256.0)
} where (M == N)

zeros out O[M][N] par i in 0:M-1 par j in 0:N-1 O[i,j] = 0.0

main
{
  var IXS = 6
  var IYS = IXS
  var KXS = 5
  var KYS = KXS
  var IIN[IXS][IYS] = init_IN(IXS)
  var OIN[IXS][IYS] = zeros()
  var KIN[KXS][KYS] = init_K()
  /* int ret = extern start_timer() */
  OIN = conv2d(IIN,KIN)
  /* ret = extern print_time() */
  /* print the output matrix */
  /* ret = extern print_float_array2(IXS,IYS,O) */
  /* int ret = extern print_float_array2(KXS,KYS,K) */
  /* int ret = extern print_float_array2(IXS,IYS,I) */
  /* print the return value*/
  /* ret = extern p1 (ret) */
}
