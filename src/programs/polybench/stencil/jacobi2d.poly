init_jacobi out A[M][N], B[M][N]
{
  par i in 0:M-1
   par j in 0:N-1{
    A[i][j] = (((((float)i)*(((float)j)+2.0))+2.0)/((float)N))
    B[i][j] = (((((float)i)*(((float)j)+3.0))+3.0)/((float)N))
   }
}where M==N

jacobi in M, N, TSTEPS out float A[M][N], float B[M][N]
{
 /* (A, B) = init_jacobi() */
  par i in 0:M-1
   par j in 0:N-1{
    A[i][j] = (((((float)i)*(((float)j)+2.0))+2.0)/((float)N))
    B[i][j] = (((((float)i)*(((float)j)+3.0))+3.0)/((float)N))
   }
 for t in 0:TSTEPS-1{
  for i in 2:M-1
   for j in 2:N-1
    B[i][j] = 0.2*(A[i][j]+A[i][j-1]+A[i][j+1]+A[i-1][j])
  par i in 2:M-1
  par j in 2:N-1
    A[i,j] = B[i,j]
 }
}where M==N && M==TSTEPS				     
							     
main
{							     
 var TSTEPS=50
 var N = 50
 var M= 50						     
 /* int ret = extern start_timer() */
 (float J1[M,N], float J2[M,N]) = jacobi (M,N,TSTEPS)
 /* ret = extern print_time() */
 
 /* print the arrays */
 /* ret = extern print_float_array2 (M,N,J1) */
 /* ret = extern print_float_array2 (M,N,J2) */
 /* int ret = extern print_float_array2 (M,N,S) */
}							     
