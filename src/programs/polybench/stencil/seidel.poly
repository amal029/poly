init_seidel out A[M,N]
{
  par i in 0:M-1
   par j in 0:N-1
  A[i,j] = (((((float)i)*((float)j))+10.0)/((float)N))
}where M==N

seidel in M, N, TSTEPS out A[M][N]			     
{							     
 A = init_seidel()					     
 par t in 0:TSTEPS-1					     
  for i in 2:M-1					     
   for j in 2:N-1					     
    A[i][j] = ((A[i-1,j-1]+A[i-1,j]+A[i-1,j+1]+A[i,j-1]+ A[i ,j])+A[i,j+1]+
       A[i+1,j-1]+A[i+1,j]+A[i+1,j+1])/9.0		     
}where M==N && M==TSTEPS				     
							     
main							     
{							     
 var TSTEPS=5
 var N = 5						     
 var M=5						     
 int ret = extern start_timer()
 var S[M,N] = seidel (M,N,TSTEPS)
 ret = extern print_time()
 
 /* print the arrays */
 /* ret = extern print_float_array2 (M,N,J1) */
 /* ret = extern print_float_array2 (M,N,J2) */
 /* int ret = extern print_float_array2 (M,N,S) */
}							     
