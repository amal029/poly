/* Simplest and the most inefficient conv2d example*/
conv2d 
in I[data], int32s dataSizeX, int32s dataSizeY, K[kdata], int32s kernelSizeX, int32s kernelSizeY
out float O[data]
{
  var kCenterX = kernelSizeX/2
  var kCenterY = kernelSizeY/2
  var mm var nn
/*   var rowIndex var colIndex */
/*   for i in 0:dataSizeY-1{ */
/*    for j in 0:dataSizeX-1{ */
/*     float sum = 0.0 */
/*     for m in 0:kernelSizeY-1{ */
/*      mm = kernelSizeY - 1 - m */
/*      for n in 0:kernelSizeX-1{ */
/*       nn = kernelSizeX - 1 - n */
/*       rowIndex = i + m - kCenterY */
/*       colIndex = j+n-kCenterX */
/*       case (rowIndex >= 0 && rowIndex < dataSizeY && colIndex >= 0 && colIndex < dataSizeX) */
/*       {sum = sum + (I[dataSizeX*rowIndex+colIndex] * K[kernelSizeX*mm+nn]) */
/*        /\* assign to output array *\/ */
/*        O[dataSizeX*i+j] = extern fabs_add_point_5(sum)} */
/*       otherwise {} */
/*      } */
/*     } */
/*    } */
/*   } */
} where (dataSizeX >= 0 && dataSizeY >= 0)

/* read image from a file */
init_IN in int32s M out float O[M]{
  int ret2 = extern read_image_o(M,O)
  /* print the kernel size read in*/
  ret2 = extern p1(ret2)
}

/* 5x5 gaussian kernel */
init_K out OK[M]{
  OK[0] = (1.0/256.0)
  OK[1] = (4.0/256.0)
  OK[2] = (6.0/256.0)
  OK[3] = (4.0/256.0)
  OK[4] = (1.0/256.0)
  OK[5] = (4.0/256.0)
  OK[6] = (16.0/256.0)
  OK[7] = (24.0/256.0)
  OK[8] = (16.0/256.0)
  OK[9] = (4.0/256.0)
  OK[10] = (6.0/256.0)
  OK[11] = (24.0/256.0)
  OK[12] = (36.0/256.0)
  OK[13] = (24.0/256.0)
  OK[14] = (6.0/256.0)
  OK[15] = (4.0/256.0)
  OK[16] = (16.0/256.0)
  OK[17] = (24.0/256.0)
  OK[18] = (16.0/256.0)
  OK[19] = (4.0/256.0)
  OK[20] = (1.0/256.0)
  OK[21] = (4.0/256.0)
  OK[22] = (6.0/256.0)
  OK[23] = (4.0/256.0)
  OK[24] = (1.0/256.0)
}

zeros out OZ[M] for i in 0:M-1 OZ[i] = 0.0

main
{
  var IXS = 256
  var IYS = IXS
  var dataI = IXS*IYS
  var KXS = 5
  var KYS = KXS
  float IIN[IXS*IYS] = init_IN(dataI)
  float OIN[IXS*IYS] /* = zeros() */
  float KIN[KXS*KYS] = init_K()
  /* int ret = extern start_timer() */
  OIN = conv2d(IIN,IXS,IYS,KIN,KXS,KYS)
  /* ret = extern print_time() */
  /* print the output matrix */
  /* ret = extern print_float_array(data,O) */
  /* int ret = extern print_float_array2(KXS,KYS,K) */
  /* int ret = extern print_float_array2(IXS,IYS,I) */
  /* print the return value*/
  /* ret = extern p1 (ret) */
}
