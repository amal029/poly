zeros out O[M][N] par i in 0:M-1 par j in 0:N-1 O[i,j] = 0 where M==N
ones out O[M][N] par i in 0:M-1 par j in 0:N-1 O[i,j] = (i+j) where M==N

matmul in first[M,N], second[M,N] out int32s result[M,N]
{
  par i in 0:M-1 {
    par j in 0:N-1{
      for k in 0:M-1 {
          result[i,j] = result[i,j] + first[i,k] * second[k,j]
	}
    }
  }
}where M==N

FIR_filter in a[I_SIZE][I_SIZE] out o[I_SIZE][I_SIZE]
{
  par i in 0:(I_SIZE/2)-1
    par j in 0:(I_SIZE/2)-1
      o[i][j] = a[i][2*j] + a[2*i][j];
}

main
{
    var size = 4
    int ret = extern start_timer ()
    var a[size,size] = ones()
    var result2[size,size] = zeros()
    result2 = matmul(a, a)
    /* ret = extern print_time () */
    /* ret = extern print_array2 (size,size,a) */
    /* ret = extern print_array2 (size,size,result2) */
    /* result2 = test_2D (a) */
    ret = extern print_time ()
    ret = extern print_array2 (size,size,result2)
}
